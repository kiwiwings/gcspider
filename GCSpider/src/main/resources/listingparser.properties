# Wenn es beim Parsen Probleme gibt, dann ist das letze Listung unter
# DEBUG_XML/RAW_FILE gespeichert.
# Über diese Flag wird gesteuert, ob nur das letzte File geparst
# oder normal gespidert wird
debug.lastFetched=false

# if debugging is active, the response files have to be set to an existing directory
debug.active=true
debug.response.xml=src/test/debug/response.xml
debug.response.raw=src/test/debug/response.raw
debug.jtidy.error=src/test/debug/cache_tidy.err

login.cookies=cookies.#login.user#.properties

# sleep time between fetches in seconds
parse.sleep=10

# Specify which overview/list pages to be fetched, e.g. 5-8,-2,7,10- 
list.pages=1

# Specifiy how many detail pages and the same amount of user profile pages to be fetched at maximum
# Format is Integer
detail.pages=10
detail.onlynew=1

http.useragent=Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.0.10) Gecko/2009042316 Firefox/3.0.10
http.url.login=http://www.geocaching.com/login/default.aspx
http.url.list=http://www.geocaching.com/seek/nearest.aspx?ul=#parse.user#
http.url.detail=http://www.geocaching.com/seek/cache_details.aspx?log=y&wp=
http.url.hides=http://www.geocaching.com/seek/nearest.aspx?u=#parse.user#

# Parse overview page
parse.list.rowsel=//tr[contains(@class,"Data BorderTop")]
parse.list.pagecount=(//td[@class="PageBuilderWidget"])[1]/span/b[3]/text()
parse.list.guid=substring-after(td/a[starts-with(@href, "/seek")]/@href, "guid=")
parse.list.name=string(td/a[starts-with(@href, "/seek")]/span/text())
parse.list.favorites=td/a/span[@class="favorite-rank"]/text()
parse.list.type=td/a[starts-with(@href,"/seek")]/img/@alt
parse.list.placedby=gc:find(string(td/span/text()[starts-with(., "by ")]), "by (.*?) \\|")
parse.list.waypoint=gc:find(string(td/span/text()[starts-with(., "by ")]), "\\| (.*) \\|")
parse.list.myfounddate=gc:calcDate(string(td/span/span[@class='Success']/text()))
parse.list.lastfounddate=gc:calcDate(string(td[@width=70][2]/span/text()))
parse.list.state=gc:find(string(td/span/text()[starts-with(., "by ")]), ".* \\| .* \\| (.*),")
parse.list.country=gc:find(string(td/span/text()[starts-with(., "by ")]), ".* \\| .* \\| (?:.*, )?(.*)")
parse.list.archived=boolean(td//a[@class="lnk OldWarning Strike Strike"])
parse.list.disabled=boolean(td//a[@class="lnk  Strike"])
parse.list.pmonly=boolean(td/img[@src="/images/small_profile.gif"])

# Parse user page
parse.user.ownerid=substring-after(//a[@id="ctl00_ContentBody_ProfilePanel1_lnkSeePosts"]/@href, "mid=")
parse.user.owner_guid=substring-after(//a[@id="ctl00_ContentBody_ProfilePanel1_lnkEmailUser"]/@href, 'guid=')

# Parse listing/detail page
parse.detail.difficulty=substring-before(//span[@id="ctl00_ContentBody_uxLegendScale"]/img/@alt, " ")
parse.detail.terrain=substring-before(//span[@id="ctl00_ContentBody_Localize12"]/img/@alt, " ")
parse.detail.size=substring-after(//span[@class="minorCacheDetails"]/img/@alt, " ")
parse.detail.waypoint=//span[@class="CoordInfoCode"]/text()
parse.detail.latitude=gc:find(string(//a[@id="ctl00_ContentBody_uxFindLinksAllNearbyCaches"]/@href), "lat=(.+?)&")
parse.detail.longitude=gc:find(string(//a[@id="ctl00_ContentBody_uxFindLinksAllNearbyCaches"]/@href), "lng=(.+)")
parse.detail.datehidden=gc:calcDate(substring-after(//div[@id='ctl00_ContentBody_mcd2'], ': '))
parse.detail.shortdescription=gc:html2bbcode(//span[@id="ctl00_ContentBody_ShortDescription"]/following-sibling::div)
parse.detail.owner=gc:decodeUriComponent(substring-after(//a[@id="ctl00_ContentBody_uxFindLinksHiddenByThisUser"]/@href, "u="))
parse.detail.owner_guid=substring-before(substring-after(//div[@id='ctl00_ContentBody_mcd1']/a/@href, "guid="), "&")
parse.detail.hints=gc:html2bbcode(//div[@id="div_hint"]/node())
parse.detail.hints_decoded=gc:rot13(gc:html2bbcode(//div[@id="div_hint"]/node()))
parse.detail.attribute_dogs=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/dogs")]/@src))
parse.detail.attribute_fee=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/fee")]/@src))
parse.detail.attribute_rappelling=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/rappelling")]/@src))
parse.detail.attribute_boat=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/boat")]/@src))
parse.detail.attribute_scuba=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/scuba")]/@src))
parse.detail.attribute_kids=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/kids")]/@src))
parse.detail.attribute_onehour=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/onehour")]/@src))
parse.detail.attribute_scenic=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/scenic")]/@src))
parse.detail.attribute_hiking=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/hiking")]/@src))
parse.detail.attribute_climbing=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/climbing")]/@src))
parse.detail.attribute_wading=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/wading")]/@src))
parse.detail.attribute_swimming=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/swimming")]/@src))
parse.detail.attribute_available=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/available")]/@src))
parse.detail.attribute_night=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/night")]/@src))
parse.detail.attribute_winter=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/winter")]/@src))
parse.detail.attribute_poison=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/poisonoak")]/@src))
parse.detail.attribute_snakes=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/snakes")]/@src))
parse.detail.attribute_ticks=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/ticks")]/@src))
parse.detail.attribute_mines=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/mine")]/@src))
parse.detail.attribute_cliff=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/cliff")]/@src))
parse.detail.attribute_hunting=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/hunting")]/@src))
parse.detail.attribute_danger=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/danger")]/@src))
parse.detail.attribute_wheelchair=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/wheelchair")]/@src))
parse.detail.attribute_parking=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/parking")]/@src))
parse.detail.attribute_transport=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/public")]/@src))
parse.detail.attribute_drinking=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/water")]/@src))
parse.detail.attribute_wc=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/restrooms")]/@src))
parse.detail.attribute_phone=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/phone")]/@src))
parse.detail.attribute_picnic=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/picnic")]/@src))
parse.detail.attribute_camping=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/camping")]/@src))
parse.detail.attribute_bicycles=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/bicycles")]/@src))
parse.detail.attribute_motorcycles=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/motorcycles")]/@src))
parse.detail.attribute_quads=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/quads")]/@src))
parse.detail.attribute_jeeps=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/jeeps")]/@src))
parse.detail.attribute_snowmobiles=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/snowmobiles")]/@src))
parse.detail.attribute_horses=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/horses")]/@src))
parse.detail.attribute_campfires=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/campfires")]/@src))
parse.detail.attribute_thorns=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/thorn")]/@src))
parse.detail.attribute_stealth=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/stealth")]/@src))
parse.detail.attribute_stroller=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/stroller")]/@src))
parse.detail.attribute_firstaid=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/firstaid")]/@src))
parse.detail.attribute_cows=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/cow")]/@src))
parse.detail.attribute_flashlight=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/flashlight")]/@src))
parse.detail.attribute_truckrv=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/rv")]/@src))
parse.detail.attribute_fieldpuzzle=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/field_puzzle")]/@src))
parse.detail.attribute_uvlight=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/UV")]/@src))
parse.detail.attribute_snowshoes=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/snowshoes")]/@src))
parse.detail.attribute_skis=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/skiis")]/@src))
parse.detail.attribute_specialtool=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/s-tool")]/@src))
parse.detail.attribute_nightcache=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/nightcache")]/@src))
parse.detail.attribute_parkngrab=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/parkngrab")]/@src))
parse.detail.attribute_abandoned=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/AbandonedBuilding")]/@src))
parse.detail.attribute_hikeshort=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/hike_short")]/@src))
parse.detail.attribute_hikemed=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/hike_med")]/@src))
parse.detail.attribute_hikelong=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/hike_long")]/@src))
parse.detail.attribute_fuel=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/fuel")]/@src))
parse.detail.attribute_food=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/food")]/@src))
parse.detail.attribute_wirelessbeacon=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/wirelessbeacon")]/@src))
parse.detail.attribute_seasonal=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/seasonal")]/@src))
parse.detail.attribute_touristOK=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/touristOK")]/@src))
parse.detail.attribute_treeclimbing=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/treeclimbing")]/@src))
parse.detail.attribute_frontyard=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/frontyard")]/@src))
parse.detail.attribute_teamwork=gc:yesno(string(//div[@class="WidgetBody"]/img[contains(@src,"/teamwork")]/@src))

parse.list.hides_waypoint=#parse.list.waypoint#
parse.list.hides_name=#parse.list.name#
parse.list.hides_founddate=gc:calcDate(string(td[10]/span))

parse.detail.hides_datehidden=#parse.detail.datehidden#

output.gpx.attribute=<groundspeak:attribute id="$id$" inc="$state$">$text$</groundspeak:attribute>\n
output.gpx.entry=\
<wpt lat="$latitude$" lon="$longitude$">\n\
<time>$datehidden:date$</time>\n\
<name>$waypoint$</name>\n\
<desc>$name$ created by $placedby$, $type$ ($difficulty$/$terrain$)</desc>\n\
<url>http://www.geocaching.com/seek/cache_details.aspx?wp=$waypoint$</url>\n\
<urlname>$name$</urlname>\n\
<sym>Geocache Found</sym>\n\
<type>Geocache|$type$</type>\n\
<groundspeak:cache xmlns:groundspeak="http://www.groundspeak.com/cache/1/0/1" archived="$archived:boolean$" available="$disabled:neg_boolean$">\n\
<groundspeak:name>$name$</groundspeak:name>\n\
<groundspeak:placed_by>$placedby$</groundspeak:placed_by>\n\
<groundspeak:owner id="$ownerid$">$owner$</groundspeak:owner>\n\
<groundspeak:type>$type$</groundspeak:type>\n\
<groundspeak:container>$size$</groundspeak:container>\n\
<groundspeak:attributes>\n\
$attributes$\
</groundspeak:attributes>\n\
<groundspeak:difficulty>$difficulty$</groundspeak:difficulty>\n\
<groundspeak:terrain>$terrain$</groundspeak:terrain>\n\
<groundspeak:country>$country$</groundspeak:country>\n\
<groundspeak:state>$state$</groundspeak:state>\n\
<groundspeak:short_description html="False">$shortdescription$</groundspeak:short_description>\n\
<groundspeak:encoded_hints>$hints$</groundspeak:encoded_hints>\n\
<groundspeak:logs>\n\
<groundspeak:log id="$logid$">\n\
<groundspeak:date>$myfounddate:date$</groundspeak:date>\n\
<groundspeak:type>Found it</groundspeak:type>\n\
<groundspeak:finder id="#parse.gsuserid#">#parse.user#</groundspeak:finder>\n\
<groundspeak:text encoded="False">$logtext$</groundspeak:text>\n\
</groundspeak:log>\n\
</groundspeak:logs>\n\
<groundspeak:travelbugs/>\n\
</groundspeak:cache>\n\
</wpt>\n
output.gpx.header=\
<?xml version="1.0" encoding="utf-8"?>\n\
<gpx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="1.0" creator="Groundspeak Pocket Query" xsi:schemaLocation="http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd http://www.groundspeak.com/cache/1/0/1 http://www.groundspeak.com/cache/1/0/1/cache.xsd" xmlns="http://www.topografix.com/GPX/1/0">\n\
<name>My Finds Pocket Query</name>\n\
<desc>Geocache file generated by Groundspeak</desc>\n\
<author>Groundspeak</author>\n\
<email>contact@groundspeak.com</email>\n\
<time>$time$</time>\n\
<keywords>cache, geocache, groundspeak</keywords>\n\
<bounds minlat="$minlat$" minlon="$minlon$" maxlat="$maxlat$" maxlon="$maxlon$"/>\n
output.gpx.footer=</gpx>
output.gpx.headertime=yyyy-MM-dd'T'HH:mm:ss.SSS'0000Z'