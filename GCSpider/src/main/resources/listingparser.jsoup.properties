# Wenn es beim Parsen Probleme gibt, dann ist das letze Listung unter
# DEBUG_XML/RAW_FILE gespeichert.
# Über diese Flag wird gesteuert, ob nur das letzte File geparst
# oder normal gespidert wird
debug.lastFetched=false

# if debugging is active, the response files have to be set to an existing directory
debug.active=true
debug.response.xml=src/test/debug/response.xml
debug.response.raw=src/test/debug/response.raw
debug.jtidy.error=src/test/debug/cache_tidy.err

login.cookies=cookies.#login.user#.properties

# sleep time between fetches in seconds
parse.sleep=10
parse.class=de.kiwiwings.gccom.ListingParser.parser.JSoupParser

# Specify which overview/list pages to be fetched, e.g. 5-8,-2,7,10- 
list.pages=1

# Specifiy how many detail pages and the same amount of user profile pages to be fetched at maximum
# Format is Integer
detail.pages=10
detail.onlynew=1

http.useragent=Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.0.10) Gecko/2009042316 Firefox/3.0.10
http.url.login=http://www.geocaching.com/login/default.aspx
http.url.list=http://www.geocaching.com/seek/nearest.aspx?ul=#parse.user#
http.url.detail=http://www.geocaching.com/seek/cache_details.aspx?log=y&wp=
http.url.hides=http://www.geocaching.com/seek/nearest.aspx?u=#parse.user#

# Parse form fields
parse.form.inputs=input

# Parse overview page
parse.list.rowsel=tr.TertiaryRow
parse.list.pagecount=.NoBottomSpacing .PageBuilderWidget b:eq(2)
parse.list.guid={ select:".Merge a", attrib:"href", postfix:"find(guid=(.*))" }
parse.list.name={ select:".Merge a span" }
parse.list.waypoint={ select:".Merge .small", attrib:"text()", postfix:"find(\\| (.*) \\|)" }
parse.list.placedby={ select:".Merge .small", attrib:"text()", postfix:"find(by ([^|]*) \\|)" }
parse.list.favorites={ select:".favorite-rank" }
parse.list.type={ select:".Merge img", attrib:"alt" }
parse.list.myfounddate={ select:".Success", postfix:"calcDate" }
parse.list.lastfounddate={ select:"td:has(.Success) > span", postfix:"calcDate" }
parse.list.state={ select:".Merge .small", attrib:"text()", postfix:"find(.* \\| .* \\| (.*),)" }
parse.list.country={ select:".Merge .small", attrib:"text()", postfix:"find(.* \\| .* \\| (?:.*, )?(.*))" }
parse.list.archived={ select:".OldWarning", attrib:"exist()" }
parse.list.disabled={ select:".Strike:not(.OldWarning)", attrib:"exist()" }
parse.list.pmonly={ select:"img[alt=Premium Member Only Cache]", attrib:"exist()" }

# Parse user page
parse.user.ownerid={ select:"#ctl00_ContentBody_ProfilePanel1_lnkSeePosts", attrib:"href", postfix:"find(mid=(.*))" }
parse.user.owner_guid={ select:"#ctl00_ContentBody_ProfilePanel1_lnkEmailUser", attrib:"href", postfix:"find(guid=(.*))" }

# Parse listing/detail page
parse.detail.usertoken={ select:"script", index: 30, postfix:"find(userToken = '(.*)')" }
parse.detail.loggedvisits={ select:".InformationWidget h3", postfix:"find((\\d*))" }

parse.detail.attributes={ select:".WidgetBody > img", attrib:"src", postfix:"find(/images/attributes/(.*).gif)" }
parse.detail.difficulty={ select:"#ctl00_ContentBody_uxLegendScale img", attrib:"alt", postfix:"find(^([0-9.]+))" }
parse.detail.terrain={ select:"#ctl00_ContentBody_Localize12 img", attrib:"alt", postfix:"find(^([0-9.]+))" }
parse.detail.size={ select:".minorCacheDetails > img", attrib:"alt", postfix:"find( (.*)$)" }
parse.detail.waypoint={ select:".CoordInfoCode" }
parse.detail.latitude={ select:"#ctl00_ContentBody_uxFindLinksAllNearbyCaches", attrib:"href", postfix:"find(lat=(.+)&)" }
parse.detail.longitude={ select:"#ctl00_ContentBody_uxFindLinksAllNearbyCaches", attrib:"href", postfix:"find(lng=(.+))" }
parse.detail.datehidden={ select:"#ctl00_ContentBody_mcd2", postfix:"findAndDate(: (.*))" }
parse.detail.shortdescription={ select:"#ctl00_ContentBody_ShortDescription", attrib:"tree()", postfix:"bbcode" }
parse.detail.hints={ select:"#div_hint", attrib:"tree()", postfix:"bbcode" }
parse.detail.hints_decoded={ select:"#div_hint", attrib:"tree()", postfix:"bbcode(rot13)" }
parse.detail.owner={ select:"#ctl00_ContentBody_uxFindLinksHiddenByThisUser", attrib:"href", postfix:"findAndDecode(u=(.*))" }
parse.detail.owner_guid={ select:"#ctl00_ContentBody_mcd1 a", attrib:"href", postfix:"find(guid=(.*?)&)" }

parse.list.hides_rowsel=tr.UserOwned
parse.list.hides_waypoint=#parse.list.waypoint#
parse.list.hides_name=#parse.list.name#
parse.list.hides_founddate={ select:"td:eq(9) span", postfix:"calcDate" }

parse.detail.hides_datehidden=#parse.detail.datehidden#

output.gpx.attribute=<groundspeak:attribute id="$id$" inc="$state$">$text$</groundspeak:attribute>\n
output.gpx.entry=\
<wpt lat="$latitude$" lon="$longitude$">\n\
<time>$datehidden:date$</time>\n\
<name>$waypoint$</name>\n\
<desc>$name$ created by $placedby$, $type$ ($difficulty$/$terrain$)</desc>\n\
<url>http://www.geocaching.com/seek/cache_details.aspx?wp=$waypoint$</url>\n\
<urlname>$name$</urlname>\n\
<sym>Geocache Found</sym>\n\
<type>Geocache|$type$</type>\n\
<groundspeak:cache xmlns:groundspeak="http://www.groundspeak.com/cache/1/0/1" archived="$archived:boolean$" available="$disabled:neg_boolean$">\n\
<groundspeak:name>$name$</groundspeak:name>\n\
<groundspeak:placed_by>$placedby$</groundspeak:placed_by>\n\
<groundspeak:owner id="$ownerid$">$owner$</groundspeak:owner>\n\
<groundspeak:type>$type$</groundspeak:type>\n\
<groundspeak:container>$size$</groundspeak:container>\n\
<groundspeak:attributes>\n\
$attributes$\
</groundspeak:attributes>\n\
<groundspeak:difficulty>$difficulty$</groundspeak:difficulty>\n\
<groundspeak:terrain>$terrain$</groundspeak:terrain>\n\
<groundspeak:country>$country$</groundspeak:country>\n\
<groundspeak:state>$state$</groundspeak:state>\n\
<groundspeak:short_description html="False">$shortdescription$</groundspeak:short_description>\n\
<groundspeak:encoded_hints>$hints$</groundspeak:encoded_hints>\n\
<groundspeak:logs>\n\
<groundspeak:log id="$logid$">\n\
<groundspeak:date>$myfounddate:date$</groundspeak:date>\n\
<groundspeak:type>Found it</groundspeak:type>\n\
<groundspeak:finder id="#parse.gsuserid#">#parse.user#</groundspeak:finder>\n\
<groundspeak:text encoded="False">$logtext$</groundspeak:text>\n\
</groundspeak:log>\n\
</groundspeak:logs>\n\
<groundspeak:travelbugs/>\n\
</groundspeak:cache>\n\
</wpt>\n
output.gpx.header=\
<?xml version="1.0" encoding="utf-8"?>\n\
<gpx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="1.0" creator="Groundspeak Pocket Query" xsi:schemaLocation="http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd http://www.groundspeak.com/cache/1/0/1 http://www.groundspeak.com/cache/1/0/1/cache.xsd" xmlns="http://www.topografix.com/GPX/1/0">\n\
<name>My Finds Pocket Query</name>\n\
<desc>Geocache file generated by Groundspeak</desc>\n\
<author>Groundspeak</author>\n\
<email>contact@groundspeak.com</email>\n\
<time>$time$</time>\n\
<keywords>cache, geocache, groundspeak</keywords>\n\
<bounds minlat="$minlat$" minlon="$minlon$" maxlat="$maxlat$" maxlon="$maxlon$"/>\n
output.gpx.footer=</gpx>
output.gpx.headertime=yyyy-MM-dd'T'HH:mm:ss.SSS'0000Z'